name: Automated Environment Setup & Configuration

on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'Type of environment setup'
        required: true
        type: choice
        options:
          - development
          - testing
          - production
          - docker
          - cloud
          - complete
        default: 'development'
      include_security_tools:
        description: 'Include security tools installation'
        required: false
        type: boolean
        default: true
      setup_monitoring:
        description: 'Setup monitoring and logging'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: read
  actions: read

jobs:
  # üîß Environment Analysis
  environment-analysis:
    name: Analyze Environment Requirements
    runs-on: ubuntu-latest
    outputs:
      os-type: ${{ steps.detect.outputs.os-type }}
      python-version: ${{ steps.detect.outputs.python-version }}
      node-version: ${{ steps.detect.outputs.node-version }}
      go-version: ${{ steps.detect.outputs.go-version }}
      setup-matrix: ${{ steps.matrix.outputs.setup-matrix }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Detect Environment Requirements
      id: detect
      run: |
        echo "üîç Analyzing environment requirements..."
        
        # Detect OS type
        OS_TYPE="ubuntu-latest"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          OS_TYPE="windows-latest"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          OS_TYPE="macos-latest"
        fi
        echo "os-type=$OS_TYPE" >> $GITHUB_OUTPUT
        
        # Detect Python version from requirements or default
        PYTHON_VERSION="3.12"
        if [[ -f "runtime.txt" ]]; then
          PYTHON_VERSION=$(grep -o "python-[0-9]\+\.[0-9]\+" runtime.txt | cut -d- -f2 || echo "3.12")
        elif [[ -f ".python-version" ]]; then
          PYTHON_VERSION=$(cat .python-version | head -1)
        fi
        echo "python-version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
        
        # Detect Node.js version
        NODE_VERSION="20"
        if [[ -f ".nvmrc" ]]; then
          NODE_VERSION=$(cat .nvmrc)
        elif [[ -f "package.json" ]]; then
          NODE_VERSION=$(jq -r '.engines.node // "20"' package.json | tr -d 'v>=^~')
        fi
        echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
        
        # Detect Go version
        GO_VERSION="1.21"
        if [[ -f "go.mod" ]]; then
          GO_VERSION=$(grep "^go " go.mod | cut -d' ' -f2 || echo "1.21")
        fi
        echo "go-version=$GO_VERSION" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Environment analysis completed"
        echo "OS: $OS_TYPE, Python: $PYTHON_VERSION, Node: $NODE_VERSION, Go: $GO_VERSION"

    - name: Generate Setup Matrix
      id: matrix
      run: |
        # Create setup matrix based on input type
        SETUP_TYPE="${{ github.event.inputs.setup_type }}"
        
        case $SETUP_TYPE in
          "development")
            MATRIX='["core-deps", "dev-tools", "security-tools"]'
            ;;
          "testing")
            MATRIX='["core-deps", "test-tools", "security-tools"]'
            ;;
          "production")
            MATRIX='["core-deps", "prod-tools", "monitoring"]'
            ;;
          "docker")
            MATRIX='["docker-setup", "container-tools"]'
            ;;
          "cloud")
            MATRIX='["core-deps", "cloud-tools", "security-tools"]'
            ;;
          "complete")
            MATRIX='["core-deps", "dev-tools", "test-tools", "security-tools", "cloud-tools", "monitoring"]'
            ;;
          *)
            MATRIX='["core-deps"]'
            ;;
        esac
        
        echo "setup-matrix=$MATRIX" >> $GITHUB_OUTPUT
        echo "Setup matrix: $MATRIX"

  # üêç Python Environment Setup
  python-environment:
    name: Setup Python Environment
    runs-on: ${{ needs.environment-analysis.outputs.os-type }}
    needs: environment-analysis

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Python ${{ needs.environment-analysis.outputs.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ needs.environment-analysis.outputs.python-version }}
        cache: 'pip'

    - name: Upgrade pip and install tools
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools virtualenv pip-tools

    - name: Create Virtual Environment
      run: |
        python -m venv bl4ckc3ll_env
        
        # Activation command for different OS
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "source bl4ckc3ll_env/Scripts/activate" > activate_env.sh
        else
          echo "source bl4ckc3ll_env/bin/activate" > activate_env.sh
        fi
        
        chmod +x activate_env.sh

    - name: Install Core Python Dependencies
      run: |
        source activate_env.sh
        pip install -r requirements.txt
        
        # Install additional development dependencies
        pip install pytest pytest-cov black flake8 mypy bandit safety

    - name: Verify Python Installation
      run: |
        source activate_env.sh
        python --version
        pip list
        
        # Test core imports
        python -c "
        import bl4ckc3ll_p4nth30n
        import requests
        import beautifulsoup4
        import numpy
        import pandas
        print('‚úÖ All core Python modules imported successfully')
        "

    - name: Generate Python Setup Report
      run: |
        source activate_env.sh
        
        cat << EOF > python-setup-report.md
        # üêç Python Environment Setup Report
        
        ## Environment Details
        - **Python Version:** $(python --version)
        - **Virtual Environment:** bl4ckc3ll_env
        - **Package Manager:** pip $(pip --version | cut -d' ' -f2)
        
        ## Installed Packages
        \`\`\`
        $(pip list)
        \`\`\`
        
        ## Core Dependencies Verified
        - ‚úÖ bl4ckc3ll_p4nth30n (main application)
        - ‚úÖ requests (HTTP library)
        - ‚úÖ beautifulsoup4 (HTML parsing)
        - ‚úÖ numpy (numerical computing)
        - ‚úÖ pandas (data analysis)
        - ‚úÖ Development tools (pytest, black, flake8, mypy)
        
        ## Next Steps
        1. Activate environment: \`source activate_env.sh\`
        2. Run tests: \`pytest\`
        3. Start development: \`python bl4ckc3ll_p4nth30n.py --help\`
        EOF

    - name: Upload Python Environment
      uses: actions/upload-artifact@v4
      with:
        name: python-environment
        path: |
          activate_env.sh
          python-setup-report.md
        retention-days: 7

  # üü¢ Node.js Environment Setup
  nodejs-environment:
    name: Setup Node.js Environment
    runs-on: ${{ needs.environment-analysis.outputs.os-type }}
    needs: environment-analysis

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ needs.environment-analysis.outputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ needs.environment-analysis.outputs.node-version }}
        cache: 'npm'

    - name: Install Node.js Dependencies
      run: |
        npm ci
        
        # Install global development tools
        npm install -g eslint jshint prettier nodemon

    - name: Verify Node.js Installation
      run: |
        node --version
        npm --version
        npm list --depth=0
        
        # Test ESLint configuration
        npx eslint --version
        npx eslint . --ext .js --max-warnings 10 || true

    - name: Generate Node.js Setup Report
      run: |
        cat << EOF > nodejs-setup-report.md
        # üü¢ Node.js Environment Setup Report
        
        ## Environment Details
        - **Node.js Version:** $(node --version)
        - **NPM Version:** $(npm --version)
        - **Package Manager:** npm
        
        ## Installed Packages
        \`\`\`
        $(npm list --depth=0)
        \`\`\`
        
        ## Global Tools
        - ‚úÖ ESLint (code linting)
        - ‚úÖ JSHint (additional linting)
        - ‚úÖ Prettier (code formatting)
        - ‚úÖ Nodemon (development server)
        
        ## Available Scripts
        $(if [[ -f "package.json" ]]; then jq -r '.scripts | to_entries[] | "- `npm run \(.key)`: \(.value)"' package.json; fi)
        
        ## Next Steps
        1. Run linting: \`npm run lint\`
        2. Start development: \`npm run dev\` (if available)
        3. Run tests: \`npm test\` (if available)
        EOF

    - name: Upload Node.js Environment
      uses: actions/upload-artifact@v4
      with:
        name: nodejs-environment
        path: nodejs-setup-report.md
        retention-days: 7

  # üîß Security Tools Setup
  security-tools-setup:
    name: Setup Security Tools
    runs-on: ubuntu-latest
    needs: environment-analysis
    if: github.event.inputs.include_security_tools == 'true'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Go ${{ needs.environment-analysis.outputs.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ needs.environment-analysis.outputs.go-version }}

    - name: Install Go Security Tools
      run: |
        echo "üîê Installing Go-based security tools..."
        
        # ProjectDiscovery tools
        go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
        go install github.com/projectdiscovery/httpx/cmd/httpx@latest
        go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
        go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
        go install github.com/projectdiscovery/katana/cmd/katana@latest
        go install github.com/projectdiscovery/dnsx/cmd/dnsx@latest
        go install github.com/projectdiscovery/uncover/cmd/uncover@latest
        
        # Additional security tools
        go install github.com/lc/gau/v2/cmd/gau@latest
        go install github.com/ffuf/ffuf/v2@latest
        go install github.com/tomnomnom/waybackurls@latest
        go install github.com/tomnomnom/httprobe@latest
        go install github.com/michenriksen/aquatone@latest
        go install github.com/hakluke/hakrawler@latest
        
        # Add Go bin to PATH
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Install System Security Tools
      run: |
        echo "üõ°Ô∏è Installing system security tools..."
        
        # Update package lists
        sudo apt-get update
        
        # Install network and security tools
        sudo apt-get install -y \
          nmap \
          masscan \
          gobuster \
          dirb \
          nikto \
          sqlmap \
          hydra \
          john \
          hashcat \
          aircrack-ng \
          wireshark \
          tcpdump \
          netcat \
          socat \
          curl \
          wget \
          git \
          jq \
          yq \
          unzip \
          tar \
          gzip

    - name: Install Python Security Tools
      run: |
        echo "üêç Installing Python security tools..."
        
        pip3 install --user \
          dirsearch \
          arjun \
          xsstrike \
          corscanner \
          subjack \
          sublister \
          subdomainizer \
          photon \
          linkfinder \
          jsparser \
          retire \
          safety \
          bandit \
          semgrep \
          checkov \
          terrascan

    - name: Setup Nuclei Templates
      run: |
        echo "üìã Setting up Nuclei templates..."
        nuclei -update-templates
        
        # Download additional community templates
        git clone https://github.com/projectdiscovery/nuclei-templates.git /tmp/nuclei-templates
        
        # Create custom template directory
        mkdir -p ~/.config/nuclei/templates/custom
        
        echo "‚úÖ Nuclei templates updated"

    - name: Create Security Tools Configuration
      run: |
        echo "‚öôÔ∏è Creating security tools configuration..."
        
        # Create configuration directory
        mkdir -p ~/.config/bl4ckc3ll_pantheon
        
        # Create tools configuration
        cat << 'EOF' > ~/.config/bl4ckc3ll_pantheon/tools-config.yml
        security_tools:
          reconnaissance:
            subfinder:
              threads: 10
              timeout: 30
            httpx:
              threads: 50
              timeout: 10
            naabu:
              top_ports: 1000
              rate: 1000
          
          vulnerability_scanning:
            nuclei:
              templates_path: ~/.config/nuclei/templates/
              concurrency: 25
              rate_limit: 150
            nmap:
              timing: T4
              scripts: default,safe
          
          web_security:
            ffuf:
              threads: 40
              rate: 100
            gobuster:
              threads: 30
              timeout: 10s
        
        paths:
          wordlists: /usr/share/wordlists/
          templates: ~/.config/nuclei/templates/
          output: ./output/
        EOF

    - name: Verify Security Tools Installation
      run: |
        echo "‚úÖ Verifying security tools installation..."
        
        # Test Go tools
        echo "Go-based tools:"
        subfinder -version || echo "‚ùå subfinder not found"
        httpx -version || echo "‚ùå httpx not found"  
        nuclei -version || echo "‚ùå nuclei not found"
        naabu -version || echo "‚ùå naabu not found"
        katana -version || echo "‚ùå katana not found"
        
        # Test system tools
        echo -e "\nSystem tools:"
        nmap --version | head -1 || echo "‚ùå nmap not found"
        gobuster version || echo "‚ùå gobuster not found"
        sqlmap --version | head -1 || echo "‚ùå sqlmap not found"
        
        # Test Python tools
        echo -e "\nPython tools:"
        dirsearch --version || echo "‚ùå dirsearch not found"
        bandit --version || echo "‚ùå bandit not found"
        safety --version || echo "‚ùå safety not found"

    - name: Generate Security Tools Report
      run: |
        cat << EOF > security-tools-report.md
        # üîê Security Tools Setup Report
        
        ## Go-based Tools (ProjectDiscovery Suite)
        - ‚úÖ **Subfinder** - Subdomain discovery tool
        - ‚úÖ **HTTPx** - Fast HTTP prober
        - ‚úÖ **Nuclei** - Vulnerability scanner
        - ‚úÖ **Naabu** - Port scanning tool
        - ‚úÖ **Katana** - Web crawler
        - ‚úÖ **DNSx** - DNS toolkit
        
        ## Additional Go Tools
        - ‚úÖ **GAU** - Get All URLs
        - ‚úÖ **FFUF** - Fast web fuzzer
        - ‚úÖ **Waybackurls** - Wayback machine URLs
        - ‚úÖ **HTTProbe** - HTTP probe tool
        - ‚úÖ **Aquatone** - Visual inspection tool
        - ‚úÖ **Hakrawler** - Web crawler
        
        ## System Security Tools
        - ‚úÖ **Nmap** - Network mapper
        - ‚úÖ **Masscan** - Mass IP scanner
        - ‚úÖ **Gobuster** - Directory/DNS bruteforcer
        - ‚úÖ **Nikto** - Web server scanner
        - ‚úÖ **SQLMap** - SQL injection tool
        - ‚úÖ **Hydra** - Password cracker
        - ‚úÖ **John the Ripper** - Password cracker
        - ‚úÖ **Hashcat** - Advanced password recovery
        
        ## Python Security Tools
        - ‚úÖ **Dirsearch** - Web path scanner
        - ‚úÖ **Arjun** - HTTP parameter discovery
        - ‚úÖ **XSStrike** - XSS detection tool
        - ‚úÖ **Bandit** - Python security linter
        - ‚úÖ **Safety** - Dependency vulnerability scanner
        - ‚úÖ **Semgrep** - Static analysis tool
        
        ## Configuration
        - üìÅ Configuration directory: \`~/.config/bl4ckc3ll_pantheon/\`
        - üìã Nuclei templates: Updated to latest version
        - ‚öôÔ∏è Tool configurations: Optimized for performance
        
        ## Usage Examples
        \`\`\`bash
        # Subdomain discovery
        subfinder -d target.com -o subdomains.txt
        
        # Port scanning
        naabu -host target.com -top-ports 1000
        
        # HTTP probing
        httpx -l subdomains.txt -o live-hosts.txt
        
        # Vulnerability scanning
        nuclei -l live-hosts.txt -o vulnerabilities.txt
        
        # Directory fuzzing
        ffuf -u https://target.com/FUZZ -w /usr/share/wordlists/dirb/common.txt
        \`\`\`
        
        ## Next Steps
        1. Update nuclei templates regularly: \`nuclei -update-templates\`
        2. Configure API keys for enhanced scanning
        3. Review tool configurations in \`~/.config/bl4ckc3ll_pantheon/\`
        4. Start reconnaissance workflow with \`bl4ckc3ll_p4nth30n.py\`
        EOF

    - name: Upload Security Tools Configuration
      uses: actions/upload-artifact@v4
      with:
        name: security-tools-setup
        path: |
          security-tools-report.md
          ~/.config/bl4ckc3ll_pantheon/tools-config.yml
        retention-days: 30

  # üê≥ Docker Environment Setup
  docker-environment:
    name: Setup Docker Environment
    runs-on: ubuntu-latest
    needs: environment-analysis
    if: github.event.inputs.setup_type == 'docker' || github.event.inputs.setup_type == 'complete'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Docker Compose Configuration
      run: |
        cat << 'EOF' > docker-compose.dev.yml
        version: '3.8'
        services:
          bl4ckc3ll-pantheon:
            build:
              context: .
              dockerfile: Dockerfile
              target: development
            ports:
              - "8080:8080"
              - "5000:5000"  # Flask debug server
            volumes:
              - .:/app
              - ./logs:/app/logs
              - ./output:/app/output
            environment:
              - ENVIRONMENT=development
              - DEBUG=true
              - LOG_LEVEL=DEBUG
            networks:
              - pantheon-network
            depends_on:
              - redis
              - postgres
              
          redis:
            image: redis:7-alpine
            ports:
              - "6379:6379"
            volumes:
              - redis-data:/data
            networks:
              - pantheon-network
            
          postgres:
            image: postgres:15-alpine
            ports:
              - "5432:5432"
            environment:
              - POSTGRES_DB=bl4ckc3ll_pantheon
              - POSTGRES_USER=pantheon_user
              - POSTGRES_PASSWORD=pantheon_pass
            volumes:
              - postgres-data:/var/lib/postgresql/data
              - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
            networks:
              - pantheon-network
              
          nginx:
            image: nginx:alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./nginx/nginx.conf:/etc/nginx/nginx.conf
              - ./nginx/ssl:/etc/nginx/ssl
            networks:
              - pantheon-network
            depends_on:
              - bl4ckc3ll-pantheon
              
        volumes:
          redis-data:
          postgres-data:
          
        networks:
          pantheon-network:
            driver: bridge
        EOF

    - name: Create Production Docker Compose
      run: |
        cat << 'EOF' > docker-compose.prod.yml
        version: '3.8'
        services:
          bl4ckc3ll-pantheon:
            build:
              context: .
              dockerfile: Dockerfile
              target: production
            ports:
              - "8080:8080"
            volumes:
              - ./logs:/app/logs
              - ./output:/app/output
              - ./configs:/app/configs:ro
            environment:
              - ENVIRONMENT=production
              - DEBUG=false
              - LOG_LEVEL=INFO
            networks:
              - pantheon-network
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
              interval: 30s
              timeout: 10s
              retries: 3
            depends_on:
              - redis
              - postgres
              
          redis:
            image: redis:7-alpine
            volumes:
              - redis-data:/data
            networks:
              - pantheon-network
            restart: unless-stopped
            
          postgres:
            image: postgres:15-alpine
            environment:
              - POSTGRES_DB=bl4ckc3ll_pantheon
              - POSTGRES_USER=pantheon_user
              - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
            volumes:
              - postgres-data:/var/lib/postgresql/data
            networks:
              - pantheon-network
            restart: unless-stopped
            secrets:
              - db_password
              
          nginx:
            image: nginx:alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./nginx/nginx.conf:/etc/nginx/nginx.conf
              - ./nginx/ssl:/etc/nginx/ssl
              - /etc/letsencrypt:/etc/letsencrypt:ro
            networks:
              - pantheon-network
            restart: unless-stopped
            depends_on:
              - bl4ckc3ll-pantheon
              
        volumes:
          redis-data:
          postgres-data:
          
        networks:
          pantheon-network:
            driver: bridge
            
        secrets:
          db_password:
            file: ./secrets/db_password.txt
        EOF

    - name: Create Docker Helper Scripts
      run: |
        # Development startup script
        cat << 'EOF' > docker-dev.sh
        #!/bin/bash
        set -e

        echo "üê≥ Starting Bl4ckC3ll_PANTHEON development environment..."
        
        # Create necessary directories
        mkdir -p logs output configs secrets
        
        # Build and start services
        docker-compose -f docker-compose.dev.yml up --build -d
        
        echo "‚úÖ Development environment started!"
        echo "üåê Application: http://localhost:8080"
        echo "üîç Logs: docker-compose -f docker-compose.dev.yml logs -f"
        echo "üõë Stop: docker-compose -f docker-compose.dev.yml down"
        EOF
        
        # Production startup script
        cat << 'EOF' > docker-prod.sh
        #!/bin/bash
        set -e

        echo "üöÄ Starting Bl4ckC3ll_PANTHEON production environment..."
        
        # Create necessary directories
        mkdir -p logs output configs secrets
        
        # Generate database password if not exists
        if [[ ! -f "secrets/db_password.txt" ]]; then
          openssl rand -base64 32 > secrets/db_password.txt
          chmod 600 secrets/db_password.txt
          echo "üìù Generated database password"
        fi
        
        # Build and start services
        docker-compose -f docker-compose.prod.yml up --build -d
        
        echo "‚úÖ Production environment started!"
        echo "üåê Application: http://localhost"
        echo "üîç Logs: docker-compose -f docker-compose.prod.yml logs -f"
        echo "üõë Stop: docker-compose -f docker-compose.prod.yml down"
        EOF
        
        # Make scripts executable
        chmod +x docker-dev.sh docker-prod.sh

    - name: Generate Docker Setup Report
      run: |
        cat << 'EOF' > docker-setup-report.md
        # üê≥ Docker Environment Setup Report
        
        ## Docker Compose Configurations Created
        
        ### Development Environment (`docker-compose.dev.yml`)
        - **Application Container**: Hot-reloaded development mode
        - **Redis**: Caching and session storage
        - **PostgreSQL**: Database with development settings
        - **Nginx**: Reverse proxy and static file serving
        
        ### Production Environment (`docker-compose.prod.yml`)
        - **Application Container**: Optimized production build
        - **Redis**: Production-ready configuration
        - **PostgreSQL**: Secure production database
        - **Nginx**: Production reverse proxy with SSL
        
        ## Helper Scripts
        - `docker-dev.sh` - Start development environment
        - `docker-prod.sh` - Start production environment
        
        ## Quick Start Commands
        
        ### Development
        ```bash
        # Start development environment
        ./docker-dev.sh
        
        # View logs
        docker-compose -f docker-compose.dev.yml logs -f bl4ckc3ll-pantheon
        
        # Execute commands in container
        docker-compose -f docker-compose.dev.yml exec bl4ckc3ll-pantheon bash
        
        # Stop environment
        docker-compose -f docker-compose.dev.yml down
        ```
        
        ### Production
        ```bash
        # Start production environment
        ./docker-prod.sh
        
        # View logs
        docker-compose -f docker-compose.prod.yml logs -f
        
        # Stop environment
        docker-compose -f docker-compose.prod.yml down
        ```
        
        ## Services and Ports
        | Service | Development Port | Production Port | Purpose |
        |---------|------------------|-----------------|---------|
        | Application | 8080, 5000 | 8080 | Main application |
        | Redis | 6379 | - | Caching |
        | PostgreSQL | 5432 | - | Database |
        | Nginx | 80, 443 | 80, 443 | Reverse proxy |
        
        ## Security Features
        - üîê Secrets management for production
        - üõ°Ô∏è Non-root container execution
        - üîí SSL/TLS termination at nginx
        - üìä Health checks for monitoring
        - üîÑ Automatic restart policies
        
        ## Monitoring
        - Health checks configured for all services
        - Log aggregation through Docker logging
        - Resource limits for production deployment
        
        ## Next Steps
        1. Customize configuration files as needed
        2. Set up SSL certificates for production
        3. Configure monitoring and alerting
        4. Set up automated backups
        5. Implement CI/CD deployment
        EOF

    - name: Upload Docker Configuration
      uses: actions/upload-artifact@v4
      with:
        name: docker-environment
        path: |
          docker-compose.dev.yml
          docker-compose.prod.yml
          docker-dev.sh
          docker-prod.sh
          docker-setup-report.md
        retention-days: 30

  # üìä Monitoring Setup
  monitoring-setup:
    name: Setup Monitoring & Logging
    runs-on: ubuntu-latest
    needs: environment-analysis
    if: github.event.inputs.setup_monitoring == 'true' || github.event.inputs.setup_type == 'complete'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Create Monitoring Stack Configuration
      run: |
        mkdir -p monitoring/{prometheus,grafana,loki,alertmanager}
        
        # Prometheus configuration
        cat << 'EOF' > monitoring/prometheus/prometheus.yml
        global:
          scrape_interval: 15s
          evaluation_interval: 15s

        alerting:
          alertmanagers:
            - static_configs:
                - targets:
                  - alertmanager:9093

        rule_files:
          - "alert_rules.yml"

        scrape_configs:
          - job_name: 'bl4ckc3ll-pantheon'
            static_configs:
              - targets: ['bl4ckc3ll-pantheon:8080']
            metrics_path: '/metrics'
            scrape_interval: 5s

          - job_name: 'node-exporter'
            static_configs:
              - targets: ['node-exporter:9100']

          - job_name: 'cadvisor'
            static_configs:
              - targets: ['cadvisor:8080']
        EOF

        # Alert rules
        cat << 'EOF' > monitoring/prometheus/alert_rules.yml
        groups:
          - name: bl4ckc3ll_pantheon_alerts
            rules:
              - alert: HighErrorRate
                expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
                for: 2m
                labels:
                  severity: warning
                annotations:
                  summary: "High error rate detected"
                  description: "Error rate is {{ $value }} errors per second"

              - alert: HighResponseTime
                expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
                for: 5m
                labels:
                  severity: warning
                annotations:
                  summary: "High response time"
                  description: "95th percentile response time is {{ $value }} seconds"

              - alert: ServiceDown
                expr: up == 0
                for: 1m
                labels:
                  severity: critical
                annotations:
                  summary: "Service is down"
                  description: "{{ $labels.job }} service is down"
        EOF

    - name: Create Grafana Dashboards
      run: |
        # Grafana provisioning
        mkdir -p monitoring/grafana/{provisioning/{dashboards,datasources},dashboards}
        
        # Datasource configuration
        cat << 'EOF' > monitoring/grafana/provisioning/datasources/prometheus.yml
        apiVersion: 1
        datasources:
          - name: Prometheus
            type: prometheus
            url: http://prometheus:9090
            isDefault: true
            editable: true
        EOF

        # Dashboard configuration
        cat << 'EOF' > monitoring/grafana/provisioning/dashboards/dashboards.yml
        apiVersion: 1
        providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            updateIntervalSeconds: 10
            options:
              path: /var/lib/grafana/dashboards
        EOF

        # Application dashboard
        cat << 'EOF' > monitoring/grafana/dashboards/bl4ckc3ll_pantheon.json
        {
          "dashboard": {
            "id": null,
            "title": "Bl4ckC3ll PANTHEON Dashboard",
            "tags": ["security", "pantheon"],
            "timezone": "browser",
            "panels": [
              {
                "title": "HTTP Requests",
                "type": "graph",
                "targets": [
                  {
                    "expr": "rate(http_requests_total[5m])",
                    "legendFormat": "{{method}} {{status}}"
                  }
                ]
              },
              {
                "title": "Response Time",
                "type": "graph", 
                "targets": [
                  {
                    "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                    "legendFormat": "95th percentile"
                  }
                ]
              },
              {
                "title": "Security Scans",
                "type": "stat",
                "targets": [
                  {
                    "expr": "security_scans_total",
                    "legendFormat": "Total Scans"
                  }
                ]
              }
            ]
          }
        }
        EOF

    - name: Create Monitoring Docker Compose
      run: |
        cat << 'EOF' > monitoring/docker-compose.monitoring.yml
        version: '3.8'
        services:
          prometheus:
            image: prom/prometheus:latest
            ports:
              - "9090:9090"
            volumes:
              - ./prometheus:/etc/prometheus
              - prometheus-data:/prometheus
            command:
              - '--config.file=/etc/prometheus/prometheus.yml'
              - '--storage.tsdb.path=/prometheus'
              - '--web.console.libraries=/etc/prometheus/console_libraries'
              - '--web.console.templates=/etc/prometheus/consoles'
              - '--web.enable-lifecycle'
            networks:
              - monitoring

          grafana:
            image: grafana/grafana:latest
            ports:
              - "3000:3000"
            volumes:
              - grafana-data:/var/lib/grafana
              - ./grafana/provisioning:/etc/grafana/provisioning
              - ./grafana/dashboards:/var/lib/grafana/dashboards
            environment:
              - GF_SECURITY_ADMIN_PASSWORD=admin
              - GF_USERS_ALLOW_SIGN_UP=false
            networks:
              - monitoring

          alertmanager:
            image: prom/alertmanager:latest
            ports:
              - "9093:9093"
            volumes:
              - ./alertmanager:/etc/alertmanager
            networks:
              - monitoring

          node-exporter:
            image: prom/node-exporter:latest
            ports:
              - "9100:9100"
            volumes:
              - /proc:/host/proc:ro
              - /sys:/host/sys:ro
              - /:/rootfs:ro
            command:
              - '--path.procfs=/host/proc'
              - '--path.rootfs=/rootfs'
              - '--path.sysfs=/host/sys'
              - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
            networks:
              - monitoring

          cadvisor:
            image: gcr.io/cadvisor/cadvisor:latest
            ports:
              - "8080:8080"
            volumes:
              - /:/rootfs:ro
              - /var/run:/var/run:rw
              - /sys:/sys:ro
              - /var/lib/docker:/var/lib/docker:ro
            networks:
              - monitoring

        volumes:
          prometheus-data:
          grafana-data:

        networks:
          monitoring:
            driver: bridge
        EOF

    - name: Create Monitoring Startup Script
      run: |
        cat << 'EOF' > monitoring/start-monitoring.sh
        #!/bin/bash
        set -e

        echo "üìä Starting monitoring stack..."

        # Create necessary directories
        mkdir -p data/{prometheus,grafana}

        # Set proper permissions
        sudo chown -R 472:472 data/grafana
        sudo chown -R 65534:65534 data/prometheus

        # Start monitoring services
        docker-compose -f docker-compose.monitoring.yml up -d

        echo "‚úÖ Monitoring stack started!"
        echo "üìä Grafana: http://localhost:3000 (admin/admin)"
        echo "üîç Prometheus: http://localhost:9090"
        echo "üö® Alertmanager: http://localhost:9093"
        EOF
        
        chmod +x monitoring/start-monitoring.sh

    - name: Generate Monitoring Report
      run: |
        cat << 'EOF' > monitoring-setup-report.md
        # üìä Monitoring & Logging Setup Report

        ## Monitoring Stack Components

        ### Prometheus (Metrics Collection)
        - **URL**: http://localhost:9090
        - **Purpose**: Collect and store application metrics
        - **Configuration**: `monitoring/prometheus/prometheus.yml`
        - **Alert Rules**: `monitoring/prometheus/alert_rules.yml`

        ### Grafana (Visualization)
        - **URL**: http://localhost:3000
        - **Credentials**: admin/admin
        - **Purpose**: Visualize metrics and create dashboards
        - **Dashboards**: Pre-configured security and performance dashboards

        ### Alertmanager (Alert Management)
        - **URL**: http://localhost:9093
        - **Purpose**: Handle alerts sent by Prometheus
        - **Configuration**: Route and manage security alerts

        ### Node Exporter (System Metrics)
        - **Port**: 9100
        - **Purpose**: Collect system-level metrics
        - **Metrics**: CPU, memory, disk, network

        ### cAdvisor (Container Metrics)
        - **Port**: 8080
        - **Purpose**: Collect container performance metrics
        - **Metrics**: Container CPU, memory, network usage

        ## Pre-configured Dashboards
        1. **Application Performance**
           - HTTP request rates and response times
           - Error rates and status code distribution
           - Security scan metrics

        2. **System Resources**
           - CPU and memory utilization
           - Disk I/O and network traffic
           - Container resource usage

        3. **Security Monitoring**
           - Failed authentication attempts
           - Vulnerability scan results
           - Security event timeline

        ## Alert Rules
        - **High Error Rate**: Triggered when 5xx errors exceed threshold
        - **High Response Time**: Triggered when 95th percentile > 1 second
        - **Service Down**: Triggered when services are unavailable
        - **Security Events**: Triggered on security-related events

        ## Getting Started

        ### Start Monitoring Stack
        ```bash
        cd monitoring
        ./start-monitoring.sh
        ```

        ### View Services
        - Grafana Dashboards: http://localhost:3000
        - Prometheus Metrics: http://localhost:9090
        - Alert Manager: http://localhost:9093

        ### Stop Monitoring Stack
        ```bash
        cd monitoring
        docker-compose -f docker-compose.monitoring.yml down
        ```

        ## Customization
        1. **Add Custom Metrics**: Modify `prometheus.yml`
        2. **Create Dashboards**: Use Grafana UI or JSON files
        3. **Configure Alerts**: Edit `alert_rules.yml`
        4. **Set Notification Channels**: Configure Alertmanager

        ## Integration
        To integrate with the main application:
        1. Add metrics endpoints to your application
        2. Update Prometheus configuration
        3. Create custom dashboards for your metrics
        4. Configure alerts for critical events

        ## Security Considerations
        - Change default Grafana password
        - Configure authentication for production
        - Secure network access to monitoring services
        - Regular backup of monitoring data
        EOF

    - name: Upload Monitoring Configuration
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-setup
        path: |
          monitoring/
          monitoring-setup-report.md
        retention-days: 30

  # üìã Environment Setup Summary
  setup-summary:
    name: Generate Setup Summary
    runs-on: ubuntu-latest
    needs: [environment-analysis, python-environment, nodejs-environment, security-tools-setup, docker-environment, monitoring-setup]
    if: always()

    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Generate Comprehensive Setup Report
      run: |
        cat << 'EOF' > generate_setup_report.py
        #!/usr/bin/env python3
        import json
        import os
        from datetime import datetime
        from pathlib import Path

        def generate_setup_report():
            """Generate comprehensive environment setup report."""
            
            setup_report = {
                'timestamp': datetime.now().isoformat(),
                'setup_type': '${{ github.event.inputs.setup_type }}',
                'include_security_tools': '${{ github.event.inputs.include_security_tools }}',
                'setup_monitoring': '${{ github.event.inputs.setup_monitoring }}',
                'components': {
                    'python_environment': '${{ needs.python-environment.result }}',
                    'nodejs_environment': '${{ needs.nodejs-environment.result }}',
                    'security_tools': '${{ needs.security-tools-setup.result }}',
                    'docker_environment': '${{ needs.docker-environment.result }}',
                    'monitoring_setup': '${{ needs.monitoring-setup.result }}'
                },
                'environment_details': {
                    'os_type': '${{ needs.environment-analysis.outputs.os-type }}',
                    'python_version': '${{ needs.environment-analysis.outputs.python-version }}',
                    'node_version': '${{ needs.environment-analysis.outputs.node-version }}',
                    'go_version': '${{ needs.environment-analysis.outputs.go-version }}'
                }
            }
            
            # Count artifacts
            artifacts_path = Path('./artifacts')
            if artifacts_path.exists():
                setup_report['artifacts'] = {
                    'total_artifacts': len(list(artifacts_path.iterdir())),
                    'artifact_types': [d.name for d in artifacts_path.iterdir() if d.is_dir()]
                }
            
            # Save JSON report
            with open('environment-setup-report.json', 'w') as f:
                json.dump(setup_report, f, indent=2)
            
            # Generate Markdown summary
            with open('environment-setup-summary.md', 'w') as f:
                f.write(f"""# üîß Environment Setup Complete!

        ## Setup Summary
        - **Setup Type:** {setup_report['setup_type']}
        - **Timestamp:** {setup_report['timestamp']}
        - **Security Tools:** {'‚úÖ Included' if setup_report['include_security_tools'] == 'true' else '‚ùå Not included'}
        - **Monitoring:** {'‚úÖ Configured' if setup_report['setup_monitoring'] == 'true' else '‚ùå Not configured'}

        ## Environment Details
        - **OS:** {setup_report['environment_details']['os_type']}
        - **Python:** {setup_report['environment_details']['python_version']}
        - **Node.js:** {setup_report['environment_details']['node_version']}
        - **Go:** {setup_report['environment_details']['go_version']}

        ## Component Status
        | Component | Status |
        |-----------|--------|""")
                
                for component, status in setup_report['components'].items():
                    status_icon = '‚úÖ' if status == 'success' else '‚ùå' if status == 'failure' else '‚è≠Ô∏è'
                    component_name = component.replace('_', ' ').title()
                    f.write(f"\n| {component_name} | {status_icon} {status} |")
                
                if 'artifacts' in setup_report:
                    f.write(f"""

        ## Generated Artifacts
        - **Total artifacts:** {setup_report['artifacts']['total_artifacts']}
        - **Artifact types:**""")
                    for artifact_type in setup_report['artifacts']['artifact_types']:
                        f.write(f"\n  - {artifact_type}")
                
                f.write("""

        ## üöÄ Quick Start Guide

        ### 1. Activate Python Environment
        ```bash
        source activate_env.sh
        python bl4ckc3ll_p4nth30n.py --help
        ```

        ### 2. Run Security Tools (if installed)
        ```bash
        # Update nuclei templates
        nuclei -update-templates

        # Start reconnaissance
        subfinder -d target.com | httpx | nuclei
        ```

        ### 3. Start Docker Environment (if configured)
        ```bash
        # Development
        ./docker-dev.sh

        # Production
        ./docker-prod.sh
        ```

        ### 4. Access Monitoring (if configured)
        - **Grafana:** http://localhost:3000 (admin/admin)
        - **Prometheus:** http://localhost:9090
        - **Alertmanager:** http://localhost:9093

        ## üìö Documentation
        Check the individual setup reports for detailed information on each component:""")
                
                if 'artifacts' in setup_report:
                    for artifact_type in setup_report['artifacts']['artifact_types']:
                        if 'report' in artifact_type or 'setup' in artifact_type:
                            f.write(f"\n- `{artifact_type}` - Detailed setup instructions")
                
                f.write("""

        ## üîß Troubleshooting
        1. **Permission Issues:** Ensure proper file permissions for scripts
        2. **Missing Dependencies:** Check individual component setup reports
        3. **Port Conflicts:** Modify port configurations in docker-compose files
        4. **Environment Variables:** Set required environment variables

        ## üìû Support
        - Create an issue in the repository for setup problems
        - Check the troubleshooting section in README.md
        - Review individual component documentation

        ## üéâ Congratulations!
        Your Bl4ckC3ll_PANTHEON environment is ready for security testing!
        """)
            
            print("Environment setup report generated successfully!")

        if __name__ == '__main__':
            generate_setup_report()
        EOF

        python3 generate_setup_report.py

    - name: Create Environment Activation Script
      run: |
        cat << 'EOF' > activate-bl4ckc3ll-environment.sh
        #!/bin/bash
        
        echo "üöÄ Activating Bl4ckC3ll_PANTHEON Environment"
        echo "============================================="
        
        # Function to check if command exists
        command_exists() {
            command -v "$1" >/dev/null 2>&1
        }
        
        # Activate Python environment if it exists
        if [[ -f "activate_env.sh" ]]; then
            echo "üêç Activating Python environment..."
            source activate_env.sh
            echo "‚úÖ Python environment activated"
        fi
        
        # Add Go tools to PATH if they exist
        if [[ -d "$HOME/go/bin" ]]; then
            export PATH="$HOME/go/bin:$PATH"
            echo "üîß Go security tools added to PATH"
        fi
        
        # Display available tools
        echo ""
        echo "üõ†Ô∏è  Available Security Tools:"
        
        if command_exists nuclei; then
            echo "  ‚úÖ Nuclei - $(nuclei -version | head -1)"
        fi
        
        if command_exists subfinder; then
            echo "  ‚úÖ Subfinder - $(subfinder -version 2>&1 | head -1)"
        fi
        
        if command_exists httpx; then
            echo "  ‚úÖ HTTPx - $(httpx -version 2>&1 | head -1)"
        fi
        
        if command_exists nmap; then
            echo "  ‚úÖ Nmap - $(nmap --version | head -1)"
        fi
        
        # Display Docker status if available
        if command_exists docker; then
            echo ""
            echo "üê≥ Docker Environment:"
            if docker ps &>/dev/null; then
                RUNNING_CONTAINERS=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -c "Up" || echo "0")
                echo "  ‚úÖ Docker is running ($RUNNING_CONTAINERS containers active)"
            else
                echo "  ‚ö†Ô∏è  Docker is available but not running"
            fi
        fi
        
        # Display quick commands
        echo ""
        echo "üöÄ Quick Commands:"
        echo "  bl4ckc3ll_p4nth30n.py --help    # Show application help"
        echo "  nuclei -update-templates         # Update vulnerability templates"
        echo "  ./docker-dev.sh                  # Start Docker development environment"
        echo "  ./start-monitoring.sh            # Start monitoring stack"
        
        echo ""
        echo "üéØ Environment ready for security testing!"
        EOF
        
        chmod +x activate-bl4ckc3ll-environment.sh

    - name: Upload Final Setup Package
      uses: actions/upload-artifact@v4
      with:
        name: complete-environment-setup
        path: |
          environment-setup-report.json
          environment-setup-summary.md
          activate-bl4ckc3ll-environment.sh
        retention-days: 90

    - name: Create Setup Success Issue
      if: needs.python-environment.result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const setupType = '${{ github.event.inputs.setup_type }}';
          const includeSecurityTools = '${{ github.event.inputs.include_security_tools }}';
          const setupMonitoring = '${{ github.event.inputs.setup_monitoring }}';
          
          const title = 'üéâ Environment Setup Completed Successfully';
          const body = `
          # üîß Bl4ckC3ll_PANTHEON Environment Setup Complete!
          
          Your automated environment setup has completed successfully.
          
          ## Setup Configuration
          - **Setup Type:** ${setupType}
          - **Security Tools:** ${includeSecurityTools === 'true' ? '‚úÖ Included' : '‚ùå Not included'}
          - **Monitoring:** ${setupMonitoring === 'true' ? '‚úÖ Configured' : '‚ùå Not configured'}
          
          ## Component Status
          - ‚úÖ Python Environment: ${{ needs.python-environment.result }}
          - ‚úÖ Node.js Environment: ${{ needs.nodejs-environment.result }}
          - ${{ needs.security-tools-setup.result == 'success' ? '‚úÖ' : '‚è≠Ô∏è' }} Security Tools: ${{ needs.security-tools-setup.result }}
          - ${{ needs.docker-environment.result == 'success' ? '‚úÖ' : '‚è≠Ô∏è' }} Docker Environment: ${{ needs.docker-environment.result }}
          - ${{ needs.monitoring-setup.result == 'success' ? '‚úÖ' : '‚è≠Ô∏è' }} Monitoring Setup: ${{ needs.monitoring-setup.result }}
          
          ## Next Steps
          1. üì¶ Download the setup artifacts from the workflow
          2. üöÄ Run \`./activate-bl4ckc3ll-environment.sh\` to activate the environment
          3. üìö Review the detailed setup reports for each component
          4. üß™ Start testing with \`python bl4ckc3ll_p4nth30n.py --help\`
          
          ## Support
          If you encounter any issues, check the individual component setup reports or create a new issue.
          
          **Workflow Run:** ${{ github.run_id }}
          **Setup Date:** ${new Date().toISOString()}
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['setup', 'environment', 'automated', 'success']
          });